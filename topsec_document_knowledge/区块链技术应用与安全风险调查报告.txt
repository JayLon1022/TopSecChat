区块链技术应用及安全风险调查报告

区块链技术应用及安全风险调查报告

目录

一、区块链  
1.1 区块链概述  
1.2 区块链的特征  
1.3 区块链的分类  
二、区块链行业发展迅速  
2.1 区块链公司  
2.2 数字资产  
2.3 全球区块链技术市场规模  
2.4 数字钱包用户统计及分析  
三、区块链安全现状与分析  
3.1 重大安全事件数量统计  
3.2 安全事件造成的经济损失分析  
3.3 各类攻击手段数量统计  
3.4 各类攻击手段造成的经济损失分析  
3.5 区块链各层被攻击次数统计  
3.6 区块链各层遭受经济损失情况分析  
3.7 区块链漏洞分类  
3.7.1 数据层  
3.7.2 网络层  
3.7.3 激励层  
3.7.4 共识层  
3.7.5 合约层  
3.7.6 应用层  
四、区块链历年经典漏洞案例分析  
4.1 美链BEC智能合约数值溢出漏洞分析  
4.1.1 安全事件描述  
4.1.2 漏洞类型  
4.1.3 漏洞详细分析  
4.1.4 安全建议  
4.2 the DAO智能合约重入漏洞分析  
4.2.1 安全事件描述  
4.2.2 漏洞类型  
4.2.3 漏洞详细分析  
4.2.4 安全建议  
4.3 parity钱包智能合约权限控制漏洞分析  
4.3.1 安全事件描述  
4.3.2 漏洞类型  
4.3.3 漏洞详细分析  
4.3.4 安全建议  
五、总结与展望  
参考文献  

一、区块链  
1.1 区块链概述  
区块链是一种分布式数据存储、点对点传输、共识机制和加密算法等计算机技术的新型应用模式。它本质上是一个去中心化的数据库，由一串使用密码学方法产生关联的数据块组成，每个数据块中包含一定数量的交易信息，以验证其有效性并生成下一个区块。

狭义上讲，区块链是按照时间顺序将数据区块组合成的链式数据结构，并通过密码学方式保证不可篡改和不可伪造的分布式账本。广义上，区块链技术利用块链式数据结构来验证和存储数据，通过分布式节点共识机制更新数据，并通过密码学方法保障数据传输和访问的安全，同时利用自动化脚本代码组成的智能合约来编程和操作数据。

一般区块链系统由数据层、网络层、共识层、激励层、合约层和应用层组成。数据层封装了底层的数据区块以及相关的数据加密和时间戳等基础数据和基本算法；网络层包括分布式组网机制、数据传播机制和数据检验机制；共识层主要封装了网络节点的各类算法；激励层将经济因素集成到区块链技术体系中，主要包括经济激励的发行机制和分配机制等；合约层主要封装各类脚本、算法和智能合约，是区块链的编程基础；应用层则封装了区块链的各种应用场景和案例。

区块链作为一种新型科学技术，其重要性不言而喻。它将改变人们的工作和生活方式，促进国家繁荣昌盛，推动社会发展进步。

2019年10月24日，中共中央政治局就区块链技术发展现状和趋势进行第十八次集体学习。中共中央总书记习近平主持学习时强调，区块链技术的集成应用在新的技术革新和产业变革中起着重要作用。我们要把区块链作为核心技术自主创新的重要突破口，明确主攻方向，加大投入力度，着力攻克一批关键核心技术，加快推动区块链技术和产业创新发展。

1.2 区块链的特征  
区块链是去中心化的，由于使用分布式核算和存储，体系中不存在中心化的硬件设备或管理机构，任意节点的权利和义务是平等的。系统中的数据块由整个系统中具有维护功能的节点共同维护。

区块链系统是开放的，除了交易各方的私有信息被加密外，区块链中的数据对所有人公开，任何人都可以通过公开的接口查询区块链数据和开发相应的应用，因此整个系统信息高度透明。

区块链采用协商一致的规范和协议（如一套公开的算法），使得系统中的所有节点能够在去信任的环境中自由、安全地交换数据，任何人为的干预都无效。

在区块链系统中，一旦信息通过验证并添加至区块链，就会永久存储，除非能够控制系统超过51%的算力，否则单个节点对数据库的修改是无效的，因此区块链的数据稳定性和可靠性极高。

由于节点之间的交换遵循固定的算法，其数据交互无需信任（区块链中的程序规则会自行判断活动是否有效），因此交易双方无须通过公开身份的方式让对方对自己产生信任，对信用的累积非常有帮助。

尽管区块链中的匿名性无法显示交易双方的身份信息，但区块链的链式结构保存了从第一个区块开始的所有历史交易数据，连接的形式是后一个区块拥有前一个区块的HASH值，区块链上任意一条记录都可通过链式结构追溯本源。

1.3 区块链的分类  
根据区块链信息的开放程度，区块链主要分为公有链、联盟链和私有链。

1. 公有链  
公有链是指世界上任何个体或团体都可以发送交易，并且交易能够获得该区块链的有效确认，任何人都可以参与其共识过程。公有区块链是最早的区块链，也是目前应用最广泛的区块链，比如比特币区块链这样的完全去中心化、不受任何机构控制的区块链。共识过程的参与者通过密码学技术以及内建的经济激励维护数据库的安全。

2. 联盟链  
联盟链是指只针对特定的某个群体的成员和有限的第三方，内部指定多个预选的节点为记账人，每个块的生成由所有预选节点共同决定。其他接入节点可以参与交易，但不过问记账过程，其他第三方可以通过该区块链开放的API进行限定查询。为了获得更好的性能，联盟链对共识或验证节点的配置和网络环境有一定要求。有了准入机制，可以使得交易性能更容易提高，避免由参次不齐的参与者产生的问题。联盟链仅限于联盟成员，因其只针对成员开放全部或部分功能，所以联盟链上的读写权限、以及记账规则都按联盟规则来“私人定制”。联盟链上的共识过程由预先选好的节点控制，一般适用于机构间的交易、结算或清算等B2B场景。联盟链由参与成员机构共同维护，并提供对参与成员的管理、认证、授权、监控、审计等全套安全管理功能。

3. 私有链  
私有链是指存在一定的中心化控制的区块链。私有链对单独的个人或实体开放，仅在私有组织内部使用，参与记账的权限由私有组织来制定。私有链的主要价值在于提供安全、可追溯、不可篡改等功能，这是传统系统很难同时做到的。

二、区块链行业发展迅速  
2.1 区块链公司  
近年来，区块链概念大爆发。据统计，截至2019年10月底，全国共有31172家公司的名称或经营范围中含有“区块链”字样。我们将通过区块链公司的数量来说明区块链技术近几年的发展趋势。

从统计数据中可以看出，自2009年开始，区块链公司数量逐年增长。其中，2009年至2015年增长较为缓慢，区块链技术处于萌芽期，大部分公司犹豫不决，对这项新技术持观望态度。2016年有较大的增长，公司数量达到3023家。2017年区块链概念声名大噪，技术相对成熟，区块链公司数量明显加快增长，达到7218家，是2016年的两倍多。2018年区块链公司数量迅速增长，达到22277家，约为2017年的3倍。到2019年10月，区块链公司总数已达到31172家，由此可以推测，区块链公司数量将持续高速增长，区块链技术也将蓬勃发展，迈入新的应用阶段。

2.2 数字资产  
据coinmarketcap统计，截至2019年12月，全球已经有4941种数字资产，总市值约为13468亿元。随着区块链技术的发展，全球数字资产也会受到相应的影响。

从统计数据中可以看出，2013年至2017年全球数字货币总市值变化不大，2018年开始迅猛增长，达到峰值，然后开始下滑。总市值的下滑原因有很多，包括国家政策的影响和盲目炒币后币圈泡沫的破裂。

2.3 全球区块链技术市场规模  
据statista统计，2016至2021年全球区块链技术市场规模逐年递增，2016年为2.102亿美元，2017年约为3.395亿美元，2018年为5.482亿美元。随着区块链技术不断成熟，越来越多的行业将采用区块链技术，进而促进区块链技术的规模扩大。根据当前的发展趋势，预计2019年市场规模约为8.854亿美元，2020年约为14.30亿美元，2021年将达到23.125亿美元。

2.4 数字钱包用户统计及分析  
我们从statista网站获得了2015-2018年全球使用区块链数字钱包用户数量的变化趋势。从统计数据中可以看出，自2016年开始，使用数字钱包的人数逐年增长，到2019年已经超过40000000。随着区块链技术的发展成熟，区块链技术将逐渐应用到各行各业中，使用区块链技术的人群也会越来越多。从图形走势来看，数字钱包用户数量还将继续增长，区块链技术将受到越来越多人的关注和使用。

三、区块链安全现状与分析  
区块链技术去中心化、不可篡改、共识机制、非对称加密等特点受到越来越多人的青睐，人们努力尝试将区块链技术应用到自己的行业中，为行业增添新的创造力。然而，人们在关注区块链技术优点的同时，往往忽略其安全问题，造成一系列安全事件的发生，并导致巨额经济损失。

以下是以往区块链领域发生的安全问题统计及分析。

3.1 重大安全事件数量统计  
据BCSEC统计，从2011年至今区块链领域发生的安全事件数量逐年增加。2011年至2017年，每年都有安全事件的发生，但总体数量不大，均在10件左右。2018年安全事件爆发式增长，全年发生了139件，约是2017年的9倍。目前为止，2019年已发生82件安全事件，可见区块链领域的安全问题仍然相当严重。

3.2 安全事件造成的经济损失分析  
区块链独特的技术优势给人们带来了极大的便利，但如果忽略安全问题，也将造成巨大的财产损失。统计数据显示，每年因安全事件造成的经济损失至少在100万美元以上，且总体损失数额逐年递增。2014年损失46568.3万美元，2017年为64428万美元，到了2018年损失数额骤增至224952.65万美元，是2017年的近4倍。目前2019年已损失73119.43万美元，可见区块链领域安全的重要性和紧迫性。

3.3 各类攻击手段数量统计  
区块链领域常见的主要攻击手段有入侵攻击、逻辑漏洞、交易阻塞攻击、随机数漏洞、回滚攻击等。从数据来看，入侵攻击占很大一部分，约为15%，逻辑漏洞占比约12%，回滚攻击约为9%，交易阻塞攻击约为7%，随机数漏洞约占6%，其他攻击占约51%。可见入侵攻击和逻辑漏洞是主要攻击手段。

3.4 各类攻击手段造成的经济损失分析  
统计结果显示，常见攻击手段造成的经济损失情况为：入侵攻击造成经济损失143861.29万美元，约占33.19%；整数溢出攻击损失101059.96万美元，约占23.31%；逻辑漏洞造成经济损失61989.8万美元，约占14.30%；金融诈骗26355万美元（约占6.08%），越权调用攻击17168.11万美元（约占3.96%），其他攻击造成损失83042.46万美元，约占19.16%。由此可见，入侵攻击和整数溢出攻击是造成巨大经济损失的主要攻击手段，两者造成的损失约占所有损失的57%。

3.5 区块链各层被攻击次数统计  
数据显示，业务层和合约层是黑客主要的攻击对象，业务层被攻击次数为120次，占总被攻击次数的45.28%，合约层被攻击次数为126次，约占47.55%。激励层目前未被攻击过。其他三层的情况分别为：共识层8次（3.02%），网络层10次（3.77%），数据层1次（0.38%）。由此可见，区块链领域的安全工作应主要集中在合约层和业务层，当然其他层也要兼顾。

3.6 区块链各层遭受经济损失情况分析  
从区块链各层被攻击造成的经济损失情况来看，损失数额最大的是业务层，损失数额为222406.97万美元，约占全部损失的51.31%。其次是合约层，造成损失204245.56万美元，占总损失的47.12%。激励层造成的损失最小，为0美元。其他层的情况分别为：共识层5262.1万美元（1.21%），数据层291万美元（0.07%），网络层1271万美元（0.29%）。数据表明，业务层和合约层共同造成的损失占全部损失的98.43%，因此区块链安全应着重加强业务层和合约层的安全防护，防止类似事件的发生。

3.7 区块链漏洞分类  
区块链整体架构可分为六层，分别为数据层、网络层、激励层、共识层、合约层和应用层。根据历年发生的安全事件和进行的安全研究，每一层都存在一些安全风险，下面将分层介绍各层存在的安全漏洞类型。

3.7.1 数据层  
数据层是区块链架构的最底层，主要用于存储数据，包括账户信息和交易信息等。数据以区块为单位，采用链式结构持久化存储到数据库中。在存储数据时还需采用非对称加密、数字签名、哈希运算等多种密码学算法和技术，以实现数据存储的安全性和不可篡改性。

根据数据层的特性和采用的技术，出现了一些特定的攻击方式。由于区块链上的数据不可篡改、永久存储的特性，攻击者可以将有害信息（恶意代码或恶意言论）存储到区块链上，以达到不可告人的目的。还可以发送大量垃圾交易，导致区块链存储数据量增加，随着时间推移，全节点因存储空间不足或维护困难而减少，从而导致区块链中心化。

区块链安全建立在密码学算法安全的基础之上。目前计算机的算力很难破解这些算法，但量子计算机具有强大的算力，近年来量子计算机研究也有了突破性进展。如果攻击者利用量子计算机发起攻击，将容易破解区块链中使用的加密算法，从而使区块链的安全性无法保障。

3.7.2 网络层  
区块链网络层实际上是一个点对点的P2P网络，主要实现区块链网络中节点之间的信息交流，包括P2P自动组网、数据传播和数据验证。节点之间通过网络通信维护一个共同的区块链数据，每个节点均可产生数据并接收转发数据。

网络层面临的安全漏洞主要有日食攻击、分割攻击、P2P协议异形攻击和双花攻击等。日食攻击是指节点发起和接收连接的个数有限，若这些连接被攻击者同时占用，节点的所有通信需经过攻击者控制的节点，从而攻击者可以控制该节点与正常节点的通信。分割攻击是攻击者利用BGP劫持或日食攻击等方法，将区块链P2P网络分割成多个小网络，使这些小网络相互隔离，无法通信，从而形成多条并行的区块链。

双花攻击是指一定数量的数字货币被花费两次或多次。攻击者通过分割攻击将网络分为多个网络，并在算力小的网络中花费一定数量数字货币购买商品，同时在另一个网络中花费同一笔数字货币进行交易，最终会造成交易状态回滚，攻击者在小网络中购买商品的数字货币会退回到攻击者账户中。

在众多公链中，部分公链使用相同或兼容的P2P网络协议，导致不同公链的节点间可以相互连接，从而造成网络通信性能和健壮性下降，严重时会导致部分节点通信阻塞。这种漏洞的形成原因是，当节点接受或发起连接时，未判断对方节点类型就盲目连接，导致连接到不同网络的节点。

3.7.3 激励层  
激励层一般应用于公有链中，主要包括发行机制和分配机制，统称激励机制。激励机制通过经济因素鼓励更多节点参与区块链网络，维护区块链系统安全稳定运行。激励机制还通过奖励遵守规则的节点，惩罚不遵守规则的节点，从而防止恶意节点对总账本进行篡改，使区块链系统健康稳定发展。

激励层同样存在一定的安全风险。例如，当比特币被开采完毕且手续费非常低时，矿工们可能因收益不高而纷纷下线，导致比特币全网算力骤降，容易遭受51%攻击。

3.7.4 共识层  
共识层主要封装了一些共识算法，包括工作量证明机制（POW）、权益证明机制（POS）、股份授权证明机制（DPOS）等。这些共识算法解决了在分布式网络中，如何使各个节点针对区块数据的有效性快速达成共识的问题。

共识层面临的安全风险主要来自这些共识机制，例如女巫攻击、51%攻击、币龄累计攻击等。女巫攻击是常见的攻击方式，攻击者可以创建多个虚假账户或节点来控制网络系统。例如，在网络投票活动中，攻击者通过控制多个节点进行投票，能够以多数票击败网络中的真实节点，从而获得投票结果的控制权。

51%攻击是指攻击者掌握了区块链全网算力的51%后发起的攻击。在POW共识机制中，每段时间只能有一个记账者，而获得记账的权利由节点拥有的算力决定，攻击者拥有全网51%算力时，篡改区块链数据的概率将显著增加。

币龄累计攻击在早期Peercoin版本中，挖矿难度由当前账户余额和每个币的持币时间决定，导致部分节点在等待足够长时间后，利用币龄的增加来控制整个网络，产生显著影响。

3.7.5 合约层  
以以太坊为例，合约层主要由智能合约和合约虚拟机两部分构成。智能合约是一种特殊的计算机协议，用于以信息化的方式执行、传播和验证合同。智能合约允许在没有第三方的情况下进行可信交易，这些交易只可查看，不能篡改或逆转。合约虚拟机是执行智能合约的平台，为合约代码提供执行环境。

智能合约存在的安全漏洞有重入漏洞、交易顺序依赖攻击、数值溢出攻击、越权访问、伪随机数漏洞、交易回滚攻击、假充值漏洞、构造函数问题、selfdestruct函数问题、未检查函数返回值问题、未初始化的存储指针、不可预期的ether问题、call函数调用问题等。合约虚拟机存在的安全漏洞有逃逸漏洞、短地址攻击、堆栈溢出攻击等。

3.7.6 应用层  
应用层主要包含交易平台、数字钱包等。交易平台是数字货币之间、数字货币与法币之间进行交易的场所，因此必然存储了用户大量的账户信息。交易平台面临的安全威胁包括撞库攻击、穷举攻击、单点登录漏洞、逻辑漏洞等。数字钱包面临的安全问题有钓鱼攻击、私钥泄露、运行环境问题、数字钱包App篡改等。

以下是对这些漏洞的简要介绍。  
1. 撞库攻击  
由于许多网民的安全意识不足，常使用通用的用户名和密码，导致攻击者通过收集互联网上已公开或未公开的用户名、邮箱和密码等信息，在目标网站上通过程序批量尝试。

2. 穷举攻击  
若网站未对登录接口做请求限制或风控，将导致攻击者可以无限发送请求逐个测试可能的值，从而暴力破解某些关键信息。

3. 单点登录漏洞  
在账户体系中此类漏洞比较隐蔽，攻击者可以通过CSRF、XSS等手段窃取用户登录的ticket，从而导致用户账号被窃取。主要攻击方式包括未使用HTTPS导致中间人劫持、Jsonp接口泄露ticket、CSRF漏洞窃取ticket、XSS漏洞窃取ticket。

4. 逻辑漏洞  
业务逻辑必须严谨，需对每段业务逻辑代码进行大量的模糊测试与代码审计，此类漏洞很难用传统方式发现，只能借助人的逻辑思维去思考其中可能出现的问题。常见的业务逻辑漏洞包括越权漏洞、验证码漏洞、条件竞争漏洞和认证漏洞。

案例：  
2017年7月，Parity客户端附带的多重签名钱包智能合约被发现严重漏洞，攻击者获得钱包最高权限，造成损失超过15万ETH，价值约3000万美元。  
2018年5月，EDU智能合约被发现严重安全漏洞，黑客可转走任意账户的EDU Token。  
2018年5月，BAI智能合约也被发现类似的漏洞，攻击者可转走任意账户的BAI Token。

5. 钓鱼攻击  
在互联网环境中，欺诈随处可见，这种攻击手段在区块链应用中同样有效。攻击者可伪造某个钱包客户端，界面和操作与真实钱包无异，可能在用户转账时窃取私钥信息或在转账地址上动手脚，从而轻易窃取资产。

案例：  
2015年1月，Bitstamp遭到钓鱼攻击，导致19000个比特币被盗。  
2017年6月，Bithumb交易所承认黑客从一名员工的计算机盗取用户数据库，利用客户信息进行网络钓鱼攻击，盗窃超过100万美元的加密货币。  
2018年2月，乌克兰黑客组织通过伪装成合法网站的恶意链接，从知名加密货币钱包Blockchain.info中盗取价值约5000万美元的加密货币。  
2018年12月，Electrum钱包确认，黑客通过虚假版本钱包进行攻击，诱骗用户输入密码信息，导致经济损失250个BTC。

6. 私钥泄露  
由于私钥信息至关重要，许多人会选择将钱包私钥文件多处备份，备份得多或备份处不安全均可能导致钱包私钥泄露。目前，针对比特币的wallet.dat文件已在各个互联网平台上出现，例如OSS服务、网盘、GitHub、NAS服务器、Web服务等，存储密钥极为危险，甚至已有攻击者开始专门扫描密钥文件，并开发相关木马病毒进行窃取。

案例：  
2018年7月，Bancor平台遭黑客攻击，造成24984个ETH、3236967个BNT、229356645个NPXS损失，价值1250万美元的以太坊、1000万美元的Bancor代币和100万美元的Pundix代币。

7. 运行环境问题  
数字钱包一般运行在手机或PC上，若手机系统或PC系统存在安全漏洞，那么数字钱包也容易遭到攻击。一旦数字钱包运行环境存在漏洞，数字钱包的安全性将面临威胁。

8. 数字钱包App被篡改  
当用户从网上下载安装数字钱包App时，若不对App的完整性进行检测，则可能导致数字资产被盗。攻击者可对数字钱包App重新打包并植入恶意代码，这些代码可窃取用户的敏感信息，如助记词、私钥等。用户一旦安装黑客重新打包的App，后果不堪设想。

四、区块链历年经典漏洞案例分析  
4.1 美链BEC智能合约数值溢出漏洞分析  
4.1.1 安全事件描述  
2018年4月22日，BeautyChain（BEC）的智能合约遭黑客攻击，攻击者通过智能合约漏洞成功盗取10^58个BEC币，随后这些BEC币转账到以下两个地址中：  
0xb4d30cac5124b46c2df0cf3e3e1be05f42119033  
0x0e823ffe018727585eaf5bc769fa80472f76c3d7  

4.1.2 漏洞类型  
BEC智能合约中关键代码存在数值溢出漏洞。  

4.1.3 漏洞详细分析  
BEC智能合约是用solidity语言开发的，solidity语言中的整型变量只能表示一定范围内的数值，超过表示范围将导致溢出。例如，uint256类型变量所能表示的数值范围是0到2^256-1。当给uint256类型变量赋值2^256时会发生溢出，此时变量中实际存储的数值为0。在BEC智能合约漏洞事件中，黑客利用了合约中的溢出漏洞，绕过安全检查代码，从而成功盗币。

漏洞代码  
BEC智能合约源码地址为：[链接](https://etherscan.io/address/0xc5d105e63711398af9bbff092d4b6769c82f79)  
通过查看源码，找到出现漏洞的部分代码，其中红框标记部分发生了溢出，如下所示：  
batchTransfer智能合约中用于批量转账的函数，可以一次性向多个不同的账户进行转账，其中参数_receivers存放转账接收方账户地址的数组，参数_value为uint256类型，是向每个地址转账的金额。

上述中提到的uint256类型，是solidity语言中常用的类型，表示的数值范围是0到2^256-1，超出该范围则发生溢出。例如下方代码：  
uint256 x = 2^256;  
uint256 y = 0 - 1;  

这两个表达式均发生溢出，x实际存储的值为0，y实际存储的值为2^256-1。  

接下来看看batchTransfer函数的执行流程：  
首先获得接收账户地址的个数并存放到cnt变量中（第260行代码），然后计算转账人需要支出的总金额amount（代码第261行），检查接收账户地址的个数cnt，规定cnt必须大于0且不超过20（代码第262行），检查转账金额_value和转账人账户余额balances[msg.sender]，规定_value要大于0，余额balances[msg.sender]要大于amount（代码第263行），从转账人余额balances[msg.sender]中扣除支出总金额amount（代码第265行），最后遍历接收者账户，将每个接收账户的余额增加_value（代码第267行），用Transfer函数记录交易。

执行流程如下图所示：  
通过上述分析，我们了解到batchTransfer函数中“uint256 amount = uint256(cnt)*_value”这句代码发生了溢出，但攻击者是如何实施攻击并利用溢出漏洞的呢？为了解释这一点，我们查阅了真实的作案现场。首先查看攻击者在调用batchTransfer函数时传入的参数。这些信息可从交易记录中获得，交易记录地址为：[链接](https://etherscan.io/tx/0xad89ff16fd1ebe3a0a7cf4ed282302c06626c1af33221ebe0d3a470aba4a660f)  
攻击者传入的参数如下：  
从上图可见，攻击者传入的_receivers参数包含2个地址，传入的_value为0x8000000000000000000000000000000000000000000000000000000000000000（63个0）。所以代码中变量cnt的值为2。_value的值过长，不便分析，转换后可知，_value的值实际上是2^255。  

现在知道了攻击者传入的参数，代入batchTransfer函数执行一遍：  
首先获得接收账户地址数组长度cnt为2。然后执行“uint256 amount = uint256(cnt)*_value”，计算出转账人需要支出的金额amount。由上文可知，cnt=2，_value=2^255，代入可得amount为2^256，但由于amount为uint256类型，表示的数值范围为0到2^256-1，因此amount数值溢出最终变为0（代码第261行）。接下来判断cnt > 0 && cnt <= 20，由于cnt为2，检查通过。再判断_value > 0 && balances[msg.sender] >= amount，_value为2^255，amount为0，再次检查通过。从转账人余额中扣除支出金额amount，由于amount为0，转账人余额并未减少。最后向接收账户发送_value（2^255）个币，并记录本次交易，交易结果如下图所示：  

使用流程图说明上述攻击过程：  
通过上述分析可以看出，该漏洞形成的原因其实是数值计算问题。虽然这个问题并不复杂，但如此小的问题导致项目方损失惨重，甚至破产，这样的惨痛案例应引起警觉。我们强烈建议项目开发人员在开发智能合约，尤其是编写转账部分关键代码时，务必慎之又慎，避免类似事件发生。针对此类漏洞，OpenZeppelin建立了一个名为SafeMath的库，用于防止数值溢出问题。因此合约开发人员在遇到数值计算时要记得使用SafeMath库，此外在智能合约正式上线前一定要进行充分的安全测试，最好请专业的第三方团队进行安全审计，从而将安全风险降到最低。

4.2 the DAO智能合约重入漏洞分析  
4.2.1 安全事件描述  
DAO（Decentralized Autonomous Organization）是一种通过智能合约将个人与个人、个人与组织、组织与组织联系在一起的新型组织形式。The DAO项目是运行在以太坊公链上的智能合约，该项目于2016年4月30日开始众筹，最终筹得1.5亿美元。2016年6月17日，The DAO智能合约遭受黑客攻击，360万以太币被盗，并最终导致以太坊分叉。

4.2.2 漏洞类型  
重入漏洞  

4.2.3 漏洞详细分析  
1. 基础知识点  
在分析漏洞之前，先了解以下基础知识点，即call函数和fallback函数。  
1）call函数  
call函数是一个底层接口，用于合约间相互调用，使用call函数进行调用时，可以通过“.value()”指定发送的ether，使用“.gas()”指定发送的gas数量，还可携带一定的数据。  
2）fallback函数  
一个智能合约只能有一个未命名函数，即fallback函数，fallback函数没有参数和返回值。当调用合约时未匹配到对应函数，则会执行该合约的fallback函数。另外，当合约接收到ether时（没有数据）也会执行fallback函数。如果合约中无fallback函数，则该合约无法通过常规转账方式接收ether。如果gas充足，fallback函数可执行复杂操作。

2. 攻击者盗币交易记录分析  
通过区块链浏览器找到攻击者的转账记录，挑选其中一个进行分析，交易地址为：[链接](https://etherscan.io/tx/0xa348da60799bff3ca804b3e49c96edebea44c57)  
交易内容如下：  
通过“parity trace”查看交易记录的详细信息，由于该笔交易中包含多个动作，在这里选择关键动作进行分析。  
首先查看该笔交易的第一个动作：  
攻击者调用了恶意合约中的函数，该函数是攻击者定义的，无法从函数库查询获得。  
接下来查看动作[3]的内容，如下所示：  
在动作[3]中，恶意合约开始调用TheDAO Token智能合约中的函数。被调用的函数由输入数据的前4个字节决定，这4个字节为methodID。在本例中methodID为0x82661dc4，通过工具查询0x82661dc4，得到被调用函数为splitDAO函数。  
查询结果如下所示：  
从智能合约中找到splitDAO函数的部分代码，如下所示：  
再看第四个动作的内容：  
createTokenProxy函数的methodID查询结果：  
在动作[4]中，TheDAO Token合约又调用TheDarkDAO合约的createTokenProxy函数。该函数代码为：  
在动作[5]中，TheDarkDAO合约又调用了extraBalance合约。  
在第6、7个动作中，TheDAO Token合约调用了DaoManagedAcct合约的accumulatedInput函数。如下所示：  
accumulatedInput函数的methodID查询结果为：  
在第8个动作中，TheDAO Token合约调用DaoManagedAcct合约的payout函数，如下所示：  
payout函数的methodID查询结果：  
payout函数代码为：  
通过对交易记录和代码分析可以知道，_recipient就是恶意合约地址，_amount就是转账金额，其中红框中的代码表示向恶意合约发送_amount个ether，即动作[9]的内容。  
在动作[9]中，DaoManagedAcct合约调用恶意合约并对其转账，当恶意合约接收到ether后，会触发其fallback函数，进入下一轮调用。  
至此，第一轮调用结束，通过仔细分析交易记录内容和合约代码，发现一轮调用的执行过程就是splitDAO函数的执行过程。接下来看看splitDAO函数中的关键代码。  
splitDAO函数中关键代码如下所示：  
在splitDAO函数中，传入参数提案号_proposalID和管理者账户_newCurator。调用theDarkDAO合约，其中代码中的newDAO就是theDarkDAO合约。  
从上图代码可知，这部分逻辑是先发送ether，然后更新账户状态信息。  
在splitDAO函数中调用withdrawRewardFor函数，下面查看withdrawRewardFor函数代码：  
在withdrawRewardFor函数中又调用rewardAccount合约的payout函数，实际上通过上面交易记录的分析可知，rewardAccount合约就是DaoManagedAcct合约，_account就是恶意合约账户，reward是转账金额。  
payout函数代码如下：  
从代码可见，payout函数通过call调用向_recipient发送_amount个ether。由于call调用中未使用.gas()指定gas值，因此该调用将发送交易所有的gas。从上述分析可知，_recipient合约就是恶意合约，当恶意合约接收到ether（未携带数据）时，会自动触发其fallback函数，从而进入下一轮转账操作。  

通过上述分析总结攻击者攻击的过程。攻击者编写一个恶意合约，恶意合约的fallback函数经过精心设计，在接收到ether时，自动触发其fallback函数，fallback函数会再次调用TheDAO Token合约的splitDAO函数。在splitDAO函数中，又调用TheDarkDAO合约的createTokenProxy函数并发送大量ether。然后调用withdrawRewardFor函数，withdrawRewardFor函数又调用ManagedAccount合约的payout函数，在payout函数中，使用call函数调用恶意合约，并向恶意合约发送ether，这样会再次触发恶意合约的fallback函数，fallback函数再次调用splitDAO函数，从而进入下一轮转账操作，调用流程如下图所示：  

4.2.4 安全建议  
针对重入漏洞，有以下几种预防方法：  
首先，在进行转账时使用transfer函数，transfer函数转账时仅发送2300gas，这些gas数量不足以使合约再去调用其他合约，从而避免重入漏洞的发生。  
其次，也可以修改转账部分的逻辑代码，改为先更新账户的状态变量，然后再发送ether的操作，即使发送的gas数量足以让合约再去调用其他合约，但由于已更新账户余额，恶意合约因攻击者账户余额不足而转账失败。  
最后，还可在智能合约中引入互斥锁，即在代码中添加一个状态变量，用于在转账执行过程中锁定合约状态，以防止重入调用。

4.3 parity钱包智能合约权限控制漏洞分析  
4.3.1 安全事件描述  
parity钱包是一款非常流行的以太坊钱包。2018年7月19日，parity钱包遭黑客攻击，造成经济损失约15万以太币（约3000万美元）。

4.3.2 漏洞类型  
权限控制漏洞  

4.3.3 漏洞详细分析  
1. 几个基础知识点  
首先看几个基础知识点：  
1）fallback函数：  
fallback函数是solidity语言中一个特殊的函数，当合约接收token时，会自动调用fallback函数。当调用合约的某个函数但无法匹配时，也会自动调用该合约的fallback函数。  
2）delegatecall函数：  
delegatecall函数是一种特殊的消息调用，调用者合约可以使用delegatecall从被调者合约中加载指定代码，并在调用者合约的环境中执行。在调用过程中，msg.sender和msg.value的值不变。也就是说，调用者合约在运行时，可以动态加载且仅加载被调用者合约的代码，并在自己的环境中执行这些代码。  
3）函数的可见性：  
在solidity语言中，函数的可见性有四种，分别为private、internal、external、public。  
private：仅当前合约可以调用。  
internal：仅当前合约及其派生合约可以调用。  
external：仅外部合约可以调用。  
public：所有合约可以调用，这是默认的可见性。

2. parity钱包简介  
parity钱包是一个多重签名钱包，多重签名功能主要通过wallet智能合约和walletLibrary库合约实现。wallet合约代码量较少，没有实现业务逻辑的代码，主要的业务逻辑在walletLibrary合约中实现。wallet合约通过delegatecall调用walletLibrary合约以实现钱包功能，这样做的好处是将代码量大的多重签名逻辑整合到walletLibrary库合约中，只需在以太坊上部署一次，所有部署的wallet合约共同使用。这不仅减少了部署钱包合约的代码量，方便部署操作，还节省了大量因部署合约所造成的Gas消耗。

parity钱包合约的工作原理如下图所示：  

3. 攻击者发送的盗币交易记录  
通过区块链交易记录，我们在攻击者账户的“internal Txns”选项中找到了盗币交易：  
由于攻击者对三个钱包的攻击手法相同，因此以第二个为例研究整个盗币过程。  
从第二个钱包的交易记录中，我们找到了黑客攻击的交易记录，如下：  
黑客发起两个交易，一个用于获取owner权限，一个用于盗币。  

4. 攻击者获取owner权限  
首先分析获取owner权限的交易记录，交易地址为：[链接](https://etherscan.io/tx/0x2e65274f2bcc729a1fe6c2b44138b1da3642fca19d6419054a13ed8fa3933c2d)  
通过parity trace的“Raw traces”可以看到交易的详细过程，如下：  
该笔交易包含两个动作，在第一个动作中攻击者账户调用被盗钱包的wallet智能合约，并将自己的账户地址作为输入参数，在第二个动作中，被盗钱包的wallet合约使用delegatecall调用walletLibrary库合约的initWallet函数。  
通过被盗钱包源代码说明这一调用过程，涉及到的合约有wallet合约和walletLibrary合约。  

攻击者调用wallet合约的initWallet函数，但wallet合约中没有initWallet函数，因此默认调用wallet合约的fallback函数。fallback函数代码如下：  
从代码中可见，fallback函数调用了walletLibrary合约，从walletLibrary合约中调用initWallet函数。下面查看initWallet函数代码：  
从上图可见，initWallet函数可传入账户地址数组，参数名字表明该地址数组是用来初始化多签名钱包owners的。此外，initWallet函数的可见性为默认（即public），任何账户都可以调用，这也是攻击者能够获取owner权限的原因。前面提到，攻击者将自己的账户地址传入initWallet函数，initWallet函数又调用initMultiowned函数，为了了解initMultiowned函数的作用，我们查看其代码：  
从代码中可见，该函数的主要功能是初始化钱包owner。该函数也是默认可见性（public），任何账户均可调用。因此，攻击者通过间接调用initMultiowned函数获得了钱包的owner权限。  
通过以上分析，我们总结攻击者获得owner权限的整个流程：攻击者首先向wallet合约发起函数调用，调用wallet合约的initWallet函数，并将自己的账户地址作为参数传入。由于wallet合约没有initWallet函数，因此默认调用其fallback函数，进而通过delegatecall调用walletLibrary合约的initWallet函数。由于initWallet函数可见性为默认，任何人均可调用，因此成功调用initWallet函数，钱包owner被更改为攻击者的账户地址。  
下面用流程图更好地说明这一过程：  

5. 攻击者盗取钱包ether  
分析攻击者发送的盗币交易，交易地址为：[链接](https://etherscan.io/tx/0x97f7662322d56e1c54bd1bab39bccf98bc736fcb9c7e61640e6ff1f633637d38)  

从上图可见，攻击者调用execute函数，这是一个转账函数，第一个参数_to为接收币的账户地址，第二个参数为转账的金额。攻击者将参数_to设置为自己的账户地址，第二个参数设置为44055。  
该笔交易详细记录如下：  
从上图中可以看出，该笔盗币交易包含三个动作。在第一个动作中，攻击者调用wallet合约的execute函数，wallet合约没有execute函数，因此默认执行fallback函数。于是，在第二个动作中使用delegatecall调用walletLibrary合约的execute函数，调用成功后，第三个动作中wallet合约向攻击者账户转账44055ether。  
攻击者盗币流程如下图所示：  

综上所述，我们梳理攻击者的思路：  
攻击者的目标是从wallet合约中获取ether，想获取ether就需调用execute函数，但execute函数需要owner权限，因此攻击者首先需获得owner权限。在查找与owner权限相关的函数时，攻击者发现只有initWallet函数的可见性是默认的，可以被任何人调用。于是攻击者果断调用initWallet函数，将自己的账户地址设为钱包唯一的owner，从而获得owner权限，随后顺利调用execute函数，成功盗币。

4.3.4 安全建议  
通过以上分析可知，该漏洞主要是由于合约中权限控制不当造成的。建议开发人员在编写合约时，务必严格控制函数的可见性，确保只有授权用户才能执行敏感操作。此外，定期进行合约审计，及时发现并修复安全漏洞，以保障合约的安全性。